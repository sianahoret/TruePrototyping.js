== TruePrototyping.js

The javascript library which provides API for using True Prototypal Inheritance.



=== Slogan

Stop thinking with "classes" and "instances" - think with true prototype chain, just a chain of delegation!


=== Traditional javascript inheritance model is weird

Javascript is a propotype-based language. From the statement it could be expected javascript uses paradigm of Prototypal Inheritance. Unfortunately it is so and at the same time not quite so.

Sure javascript uses prototypes for inheritance. But traditional inheritance model in javascript mimics classical OOP instead of to be {True Prototypal Inheritance}[http://en.wikipedia.org/wiki/Prototype-based_programming]. Using functions as object constructors with "new" operator and excurrent implementation of "prototype" and "constructor" properties, "typeof" and "instanceof" operators makes a program more complex and confusing than it can be.

To better realize what I mean you can visit these links:
* {"Prototypal Inheritance in JavaScript" by Douglas Crockford}[http://javascript.crockford.com/prototypal.html]. Just a sentence from there: "JavaScript itself is conflicted about its prototypal nature".
* {Confusion with "constructor" property}[http://joost.zeekat.nl/constructors-considered-mildly-confusing.html]


=== Ways of using true prototypal inheritance style in javascript

True prototypal inheritance style in javascript is possible for long time with using non-standard {__proto__}[https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/proto] property. Since {ECMAScript 5th Edition}[http://ecma-international.org/ecma-262/5.1/#sec-15.2.3.5] (JavaScript 1.8.5) there is a standard way for true prototypal inheritance style - Object.create and a few related methods.

So the idea is not new. A couple of links:
* {Demonstration of the true style by Tim Caswell, a Node.js developer}[http://howtonode.org/prototypical-inheritance]
* {My article (in Russian)}[http://innerbytes.net/proto/javascript/clear_prototipal_inheritance.htm]

Actually I am upset by most of popular javascript libraries and frameworks not only use the "traditional" style, but even enhance imitation of Classical OOP with class-like APIs, while I do not know a library which follows the true prototypal inheritance style. I guess why it is so (see Caution section below), but I assume the "true style" deserves to be more used than it is at nowadays.


=== Brief overview of TruePrototyping.js library

Aims of the library and corresponding stuff:

<b>Aim</b> :: <b>Properties any object expanded with</b>
A compact syntax for construction of object hierarchy with intuitively clear object relationship :: *derive* method
A convenient and uniform way for introspection and lookup of true prototype chain, even if object hierarchy was created with "traditional" style :: *ancestor* and *ancestors* properties, *super*, *isAncestorOf* and *isDescendantOf* methods

=== Creation of object hierarchy with 'derive' method

After you include the TruePrototyping.js into your program, any javascript object has 'derive' method and you can construct inheritance chain in the following way:

  Person = {
    ... // some properties
  };

  Employee = Person.tpDerive({
    ... // some Employee specific properties
  });

  John = Employee.tpDerive({
    ... // some John specific properties
  });

<b>Behind the scene, as well as on the scene, there is a chain of delegation containing only the objects you've defined</b> and nothing more:
  Employee.tpAncestor === Person // Employee.__proto__ === Person
  john.tpAncestor === Employee   // john.__proto__ === Employee

There is no mystical "prototype", which exists implicitly and {replacement of which can break object relationship at all}[http://joost.zeekat.nl/constructors-considered-mildly-confusing.html].

And what? Are there any benefits excepting "low-level cleanness"?

Well, there is following benefit. Suppose having any object in program, you want to make a very similar object, almost the same, but slightly different. With the proposed approach <b>you can derive new object from the existing one, not worrying about nature of the existing object</b> (existing object may be a Function or not, may have or not proper "prototype" or "constructor" properties):

  someExistingObject.method1();            // suppose returns "method1" string

  myObject = someExistingObject.tpDerive({   // type of someExistingObject does not matter
    method2: function(){
      return "method2";
    };
  });

  myObject.method1(); // returns "method1"
  myObject.method2(); // returns "method2"
  myObject.hasOwnProperty('method1'); // false, it is not just copying of properties, it is true delegation


=== Caution about mix of "true" style with "traditional" style

Unfortunately there is a problem with the proposed "true" prototypal inheritance style.

The "true" prototypal inheritance style is straightforward and clear, if you use it in a program system from the scratch.

However the approach can be confusing, if you try to mix it with the "traditional" way. At least you cannot completely abstract from the old way and think with the new way only, you should be careful with such mix.

For example, traditionally you use Backbone.Model in this way:

  MyModel = Backbone.Model.extend({});
  myInstance = new MyModel();           // myInstance is traditional "instanceof" MyModel

If you try to do this:

  MyModel = Backbone.Model.extend({});
  myInstance = MyModel.tpDerive();        // myInstance.__proto__ points to MyModel itself instead of MyModel.prototype

myInstance object won't act as expected for an instance of Backbone.Model, because myInstance is not traditional "instanceof" MyModel (and is not "instanceof" Backbone.Model), what the Backbone framework relies on.


=== Use for lookup of object hierarchies have been build with different frameworks

Frameworks which provides APIs for constructing object hierarchy (most of them simulate classical inheritance) in different ways provide the feature of referencing to an ancestor object (up through the hierarchy), well known as "super"-reference. Sometimes the feature is provided explicitly; sometimes the feature is there, but is not documented (and looks like inner __super__ method); sometimes the feature is just absent.

TruePrototyping library provides a few properties and methods, which allow to walk through true prototype chain: 'ancestor' and 'ancestors' properties, 'super', 'isAncestorOf' and 'isDescendantOf' methods. Moreover, it allows to do that in the same way for object hierarchies created by different frameworks.


=== What is ready to review/try

Additionally to the library itself (TruePrototyping.js file) this repository contains some program code which you can review and run:

1. There are examples of using TruePrototyping library for lookup of object hierarchies created with Propotype, Mootools, JavascriptMVC, Backbone and TruePrototyping itself. If you open <b>mix_with_frameworks/all.html</b> file in any browser, you can review the code and try to run it.

2. The library is tested with jasmine test framework. You can open <b>spec/spec.html</b> in any browser to see a result of all tests execution and you can review a source code of the tests in <b>spec/*.js</b> files.


=== TODO

* Implementation for an environment which is not [ES5-compliant]{http://kangax.github.com/es5-compat-table/}. For now I am not sure it is actually needed.
* Maybe it makes sense to implement "super" without necessity to pass ancestor's method name as a first argument. Benefit of the current implementation is only that it is very simple and, at the same time, allows calling any ancestor's method, not the exactly "super" in traditional meaning.