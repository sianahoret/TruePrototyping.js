h2. TruePrototyping.js

The javascript library which provides API for using True Prototypal Inheritance.

h3. Slogan

Stop thinking with "classes" and "instances" - think with true prototype chain, just a chain of delegation!

!https://raw.github.com/sianahoret/TruePrototyping.js/master/mix_with_frameworks/images/true_prototyping.png!

h3. Traditional javascript inheritance model is weird

While javascript's inheritance model is propotype-based by definition, the traditional constructor pattern actually mimics classical OOP. So instead of "True Prototypal Inheritance":http://en.wikipedia.org/wiki/Prototype-based_programming we have a weird hybrid of two inheritance models, and so many programmers are not comfortable with inheritance in javascript. Using functions as object constructors with "new" operator and excurrent implementation of "prototype" and "constructor" properties, "typeof" and "instanceof" operators makes a program more complex and confusing than it can be.

To better realize what I mean you can visit these links:
* "'Prototypal Inheritance in JavaScript' by Douglas Crockford":http://javascript.crockford.com/prototypal.html. A quote from there: "JavaScript's constructor pattern obscured JavaScript's true prototypal nature".
* "Confusion with 'constructor' property":http://joost.zeekat.nl/constructors-considered-mildly-confusing.html

There is a lot of javascript libraries and frameworks which provide class-like APIs and mimics classical OOP even more - they only wrap constructor-driven inheritance model so that programmer may not think about prototype property, but it is still not the mentioned True Prototypal Inheritance. At the same time, I do not know a library which follows the true prototypal inheritance style, and I am upset by this. I guess the "true style" deserves to be more used than it is at nowadays.

h3. Ways of using true prototypal inheritance style in javascript

True prototypal inheritance style in javascript is possible for long time with using non-standard "__proto__":https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/proto property. Since "ECMAScript 5th Edition":http://ecma-international.org/ecma-262/5.1/#sec-15.2.3.5 (JavaScript 1.8.5) there is a standard way - Object.create and a few related methods.

A couple of links:
* "Demonstration of the true style by Tim Caswell, a Node.js developer":http://howtonode.org/prototypical-inheritance
* "My article":http://innerbytes.net/proto/javascript/clear_prototipal_inheritance.htm (in Russian)

So the idea is not new. What do I try to achieve with the TruePrototyping library? 


h3. Brief overview of TruePrototyping.js library

The library patches all objects (via Object.prototype) with a few properties and methods.

A stuff providing a compact syntax for construction of object hierarchy with intuitively clear object relationship:

|_. Stuff                                           |_. Description |
|*tpDerive* method                                  | Creates and returns a new object, immediately derived   from the object which the method is called on. |

A stuff providing a convenient and uniform way for introspection and lookup of true prototype chain, even if object hierarchy was created with "traditional" style:

|_. Stuff                                           |_. Description |
| *tpAncestor* property                             | Returns the immediate ancestor of the object which the property is called on. |
| *tpAncestors* property                            | Returns array of all ancestors of the object which the property is called on. |
| *tpIsAncestorOf*(descendantContender) method      | Returns true, if the object which the method is called on is an ancestor (through any number of levels) of the descendantContender object, otherwise false. |
| *tpIsDescendantOf*(ancestorContender) method      | Returns true, if the object which the method is called on is an descendant (through any number of levels) of the ancestorContender object, otherwise false. |
| *tpSuper*(methodName, methodArgs) method          | Calls on the object which the method is called on the nearest base implementation of the methodName method which differs from the implementation this object has. The rest of passed parameters (methodArgs) are transmitted to the call. |
| *tpSuperImmediate*(methodName, methodArgs) method | Similar to tpSuper, but unlike it calls the immediate ancestor's implementation of methodName, even if the immediate ancestor's implementation does not differ from the implementation this object has. |
| *tpDependingOnSuperLevel*(outOfRecursionValue, inRecursionValue) method | Returns outOfRecursionValue, being called quite out or at the first level of super recursion. Returns inRecursionValue, being called inside super recursion (on any level more than the first one). |

The 'tp' prefix (abbreviation of "true prototyping") is used to eliminate possibility of name conflicts with other libraries and frameworks or just to match to your naming preferences. The prefix can be changed with the following code just after TruePrototyping.js is interpreted:

  TruePrototyping.usePrefix('_'); // underscore will be used instead of 'tp'

h3. What you need to start using TruePrototyping library

For using the library you only have to download either <b>TruePrototyping.js or TruePrototyping.min.js</b> file and to include it into your program (web page etc.).

h3. Example of use: Creation of object hierarchy with 'tpDerive' method

After you include the TruePrototyping.js into your program, any javascript object has 'tpDerive' method and you can construct inheritance tree in the following way:

<pre>
Person = {
  ... // some properties
};

Employee = Person.tpDerive({
  ... // some Employee specific properties
});

John = Employee.tpDerive({
  ... // some John specific properties
});

Serg = Employee.tpDerive({
  ... // some Serg specific properties
});
</pre>

<b>Behind the scene there is nothing except of what on the scene - only the objects you've explicitly defined:</b>

!https://raw.github.com/sianahoret/TruePrototyping.js/master/mix_with_frameworks/images/example_of_hierarchy.png!

There is no mystical "prototype", which exists implicitly and "replacement of which can break object relationship at all":http://joost.zeekat.nl/constructors-considered-mildly-confusing.html.

And what? Are there any benefits excepting "low-level cleanness"?

Well, there is following benefit. Suppose having any object in program, you want to make a very similar object, almost the same, but slightly different. With the proposed approach <b>you can derive new object from the existing one, not worrying about nature of the existing object</b> (existing object may be a Function or not, may have or not proper "prototype" or "constructor" properties):

<pre>
someExistingObject.method1();            // suppose returns "method1" string

myObject = someExistingObject.tpDerive({   // type of someExistingObject does not matter
  method2: function(){
    return "method2";
  };
});

myObject.method1(); // returns "method1"
myObject.method2(); // returns "method2"
myObject.hasOwnProperty('method1'); // false, it is not just copying of properties, it is true delegation
</pre>

h3. Caution about mix of "true" style with "traditional" style

Unfortunately there is a problem with the proposed "true" prototypal inheritance style.

The "true" prototypal inheritance style is straightforward and clear, if you use it in a program system from the scratch.

However the approach can be confusing, if you try to mix it with the "traditional" way. At least you cannot completely abstract from the old way and think with the new way only, you should be careful with such mix.

For example, traditionally you use Backbone.Model in this way:

<pre>
MyModel = Backbone.Model.extend({});
myInstance = new MyModel();           // myInstance is traditional "instanceof" MyModel
</pre>

If you try to do this:

<pre>
MyModel = Backbone.Model.extend({});
myInstance = MyModel.tpDerive();        // myInstance.__proto__ points to MyModel itself instead of MyModel.prototype
</pre>

myInstance object won't act as expected for an instance of Backbone.Model, because myInstance is not traditional "instanceof" MyModel (and is not "instanceof" Backbone.Model), what the Backbone framework relies on.


h3. Use for lookup of object hierarchies have been build with different frameworks

Frameworks which provides APIs for constructing object hierarchy (most of them simulate classical inheritance) in different ways provide the feature of <i>referencing to an ancestor object</i> (up through the hierarchy), well known as "super"-reference or "super"-call for a method. Sometimes the feature is provided explicitly; sometimes the feature is there, but is not documented (and looks like inner __super__ method); sometimes the feature is just absent.

TruePrototyping library provides a few properties and methods, which allow to walk through true prototype chain (see the table above). Moreover, it allows to do that in the same way for object hierarchies created by different frameworks. In mix_with_frameworks directory you can see examples of lookup into object hierarchies created with Prototype, Mootools, Base2, JS.Class, JavascriptMVC, Backbone, CoffeeScript and TruePrototyping itself.

h3. What you can look and try just now

Additionally to the library itself (TruePrototyping.js file) this repository contains some program code which you can review and run:

1. There are examples of using TruePrototyping library for lookup of object hierarchies created with Propotype, Mootools, JavascriptMVC, Backbone and TruePrototyping itself. If you open <b>mix_with_frameworks/all.html</b> file in any browser, you can review the code and try to run it.

2. The library is tested with jasmine test framework. You can open <b>spec/all.html</b> in any browser to see a result of all tests execution and you can review a source code of the tests in <b>spec/*.js</b> files.


h3. TODO

* Extract logic of looking for appropriate ancestor from tpSuperImmediate and tpSuper methods into, correspondingly, tpAncestorHaving(propertyName) and tpAncestorHavingDifferent(propertyName) public methods. The new separated methods can be useful, when you need to find an ancestor by the mentioned logic, but unlike in case of calling tpSuper/tpSuperImmediate you need to execute the specified property/method on its owner, not on 'this'. Unlike tpSuper/tpSuperImmediate, the new methods can accept either method (function) or property (not function) name and return an ancestor in both cases. The only problem is that the logic of tpAncestorHavingDifferent is unclear for property (not function), perhaps for such property tpAncestorHaving and ttpAncestorHavingDifferent will work equally :(.
* Add ability to provide 'initialize' method inside the second parameter of tpDerive. If initialize is passed, it will be called just after new object creation.
* Implementation for an environment which is not "ES5-compliant":http://kangax.github.com/es5-compat-table/. For now I am not sure it is actually needed.
* ? Maybe it makes sense to implement "tpSuper" without necessity to pass ancestor's method name as a first argument. Benefit of the current implementation is only that it is very simple and, at the same time, allows calling any ancestor's method, not the exactly "super" in traditional meaning.